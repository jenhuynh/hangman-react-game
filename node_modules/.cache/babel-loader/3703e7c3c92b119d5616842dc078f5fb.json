{"ast":null,"code":"var _jsxFileName = \"/Users/jenhh/src/techtonica-assignments/hangman-game-react/src/App.js\",\n    _s = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Figure from './components/Figure';\nimport WrongLetters from './components/WrongLetters';\nimport Word from './components/Word';\nimport Notification from './components/Notification';\nimport Popup from './components/Popup'; //because we can't have the same name as state when we import, we use as keyword to rename showNotication to show\n\nimport { showNotification as show } from './helpers/helpers';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst words = ['animal', 'code', 'animate', 'flavor'];\nlet selectedWord = words[Math.floor(Math.random() * words.length)];\n\nfunction App() {\n  _s();\n\n  //useState to create countdown timer\n  const [counter, setCounter] = React.useState(60); //useState to keep track and see if the game is playable, initially set to true\n\n  const [playable, setPlayable] = useState(true); //useState to keep track of correct letters, initially set to empty array\n\n  const [correctLetters, setCorrectLetters] = useState([]); //useState to keep track of wrong letters, initially set to empty array\n\n  const [wrongLetters, setWrongLetters] = useState([]); //useState to showNotification when same letter is tried twice, initially set to false\n\n  const [showNotification, setShowNotification] = useState(false); //add counter in useEffect hook so that every time when the counter changes, new setInterval() is called.\n\n  React.useEffect(() => {\n    const timer = counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n    return () => clearInterval(timer);\n  }, [counter]); //useEffect meant to be a side effect of the app\n\n  useEffect(() => {\n    const handleKeydown = event => {\n      //destructure function\n      const {\n        key,\n        keyCode\n      } = event; //if the user inputs a letter key on the keyboard, 65 - 90 is the letters on keyboard \n\n      if (playable && keyCode >= 65 && keyCode <= 90) {\n        //then get the letter user inputed\n        const letter = key.toLowerCase(); //checking to see if our selected word includes a letter in selected word\n\n        if (selectedWord.includes(letter)) {\n          //if it does not include a correct letter, we are going to add it to our letters\n          if (!correctLetters.includes(letter)) {\n            //take our correct letters and create a new array  and spread and add to that new letter\n            setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            //calling show function in and passing our setterfunction setShowNotification in helper folder\n            // if it does include our correct letter already, we've entered it twice, it needs to show notification that we already entered that letter\n            show(setShowNotification);\n          }\n        } else {\n          //if it includes wrong letter, take our wrongletters and create a new array  and spread and add to that new letter\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(wrongLetters => [...wrongLetters, letter]);\n          } else {\n            //if it already shows wrong letter twice, show notification we've already entered that letter\n            show(setShowNotification);\n          }\n        }\n      }\n    }; //we useEffect because everytime this app renders we don't want to add another eventlistener each time. \n\n\n    window.addEventListener('keydown', handleKeydown); //Everytime it renders, it makes a new event listener, we use useEffect and this function gets called and cleans up the event listener so at anytime we only have one eventlistener running. \n    // Keydown letter press\n\n    return () => window.removeEventListener('keydown', handleKeydown); //in this array, anytime correctletters, wrongletters, or playable get rendered, that's when the function if(!wrongletters.includes) is called\n  }, [correctLetters, wrongLetters, playable]);\n\n  function playAgain() {\n    setPlayable(true); //reset arrays of correct letters and wrong letters to empty array\n\n    setCorrectLetters([]);\n    setWrongLetters([]);\n    const random = Math.floor(Math.random() * words.length);\n    selectedWord = words[random];\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(Figure, {\n        wrongLetters: wrongLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WrongLetters, {\n        wrongLetters: wrongLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Word, {\n        selectedWord: selectedWord,\n        correctLetters: correctLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {\n      correctLetters: correctLetters,\n      wrongLetters: wrongLetters,\n      selectedWord: selectedWord,\n      setPlayable: setPlayable,\n      playAgain: playAgain\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      showNotification: showNotification\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"2WfGVlnzwx1Y4mDTxw+fufvLl3o=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jenhh/src/techtonica-assignments/hangman-game-react/src/App.js"],"names":["React","useState","useEffect","Header","Figure","WrongLetters","Word","Notification","Popup","showNotification","show","words","selectedWord","Math","floor","random","length","App","counter","setCounter","playable","setPlayable","correctLetters","setCorrectLetters","wrongLetters","setWrongLetters","setShowNotification","timer","setInterval","clearInterval","handleKeydown","event","key","keyCode","letter","toLowerCase","includes","currentLetters","window","addEventListener","removeEventListener","playAgain"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA0C,OAA1C;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,OAAOC,KAAP,MAAkB,oBAAlB,C,CACA;;AACA,SAASC,gBAAgB,IAAIC,IAA7B,QAAyC,mBAAzC;AACA,OAAO,WAAP;;;AAEA,MAAMC,KAAK,GAAG,CAAC,QAAD,EAAW,MAAX,EAAmB,SAAnB,EAA8B,QAA9B,CAAd;AAEA,IAAIC,YAAY,GAAGD,KAAK,CAACE,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,KAAK,CAACK,MAAjC,CAAD,CAAxB;;AAEA,SAASC,GAAT,GAAe;AAAA;;AACb;AACA,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBnB,KAAK,CAACC,QAAN,CAAe,EAAf,CAA9B,CAFa,CAIb;;AACA,QAAM,CAACmB,QAAD,EAAWC,WAAX,IAA0BpB,QAAQ,CAAC,IAAD,CAAxC,CALa,CAMf;;AACE,QAAM,CAACqB,cAAD,EAAiBC,iBAAjB,IAAsCtB,QAAQ,CAAC,EAAD,CAApD,CAPa,CAQf;;AACE,QAAM,CAACuB,YAAD,EAAeC,eAAf,IAAkCxB,QAAQ,CAAC,EAAD,CAAhD,CATa,CAUf;;AACE,QAAM,CAACQ,gBAAD,EAAmBiB,mBAAnB,IAA0CzB,QAAQ,CAAC,KAAD,CAAxD,CAXa,CAab;;AACAD,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB,UAAMyB,KAAK,GACTT,OAAO,GAAG,CAAV,IAAeU,WAAW,CAAC,MAAMT,UAAU,CAACD,OAAO,GAAG,CAAX,CAAjB,EAAgC,IAAhC,CAD5B;AAGA,WAAO,MAAMW,aAAa,CAACF,KAAD,CAA1B;AACD,GALD,EAKG,CAACT,OAAD,CALH,EAda,CAqBb;;AACFhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM4B,aAAa,GAAGC,KAAK,IAAI;AAC7B;AACA,YAAM;AAACC,QAAAA,GAAD;AAAMC,QAAAA;AAAN,UAAiBF,KAAvB,CAF6B,CAG7B;;AACE,UAAIX,QAAQ,IAAIa,OAAO,IAAI,EAAvB,IAA6BA,OAAO,IAAI,EAA5C,EAAgD;AAChD;AACE,cAAMC,MAAM,GAAGF,GAAG,CAACG,WAAJ,EAAf,CAF8C,CAGpD;;AACM,YAAIvB,YAAY,CAACwB,QAAb,CAAsBF,MAAtB,CAAJ,EAAmC;AACvC;AACM,cAAI,CAACZ,cAAc,CAACc,QAAf,CAAwBF,MAAxB,CAAL,EAAsC;AAC1C;AACKX,YAAAA,iBAAiB,CAACc,cAAc,IAAI,CAAC,GAAGA,cAAJ,EAAoBH,MAApB,CAAnB,CAAjB;AACA,WAHD,MAGO;AACL;AACA;AACAxB,YAAAA,IAAI,CAACgB,mBAAD,CAAJ;AACD;AACF,SAVD,MAUO;AACL;AACA,cAAI,CAACF,YAAY,CAACY,QAAb,CAAsBF,MAAtB,CAAL,EAAoC;AAClCT,YAAAA,eAAe,CAACD,YAAY,IAAI,CAAC,GAAGA,YAAJ,EAAkBU,MAAlB,CAAjB,CAAf;AACD,WAFD,MAEO;AACL;AACAxB,YAAAA,IAAI,CAACgB,mBAAD,CAAJ;AACD;AACF;AACF;AACF,KA5BH,CADc,CA8BZ;;;AACFY,IAAAA,MAAM,CAACC,gBAAP,CAAwB,SAAxB,EAAoCT,aAApC,EA/Bc,CAgChB;AACM;;AACJ,WAAO,MAAMQ,MAAM,CAACE,mBAAP,CAA2B,SAA3B,EAAsCV,aAAtC,CAAb,CAlCc,CAmCZ;AACH,GApCQ,EAoCN,CAACR,cAAD,EAAiBE,YAAjB,EAA+BJ,QAA/B,CApCM,CAAT;;AAsCA,WAASqB,SAAT,GAAqB;AACnBpB,IAAAA,WAAW,CAAC,IAAD,CAAX,CADmB,CAGnB;;AACAE,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAE,IAAAA,eAAe,CAAC,EAAD,CAAf;AAEA,UAAMV,MAAM,GAAGF,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBJ,KAAK,CAACK,MAAjC,CAAf;AACAJ,IAAAA,YAAY,GAAGD,KAAK,CAACI,MAAD,CAApB;AACD;;AAEC,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,8BACE,QAAC,MAAD;AAAQ,QAAA,YAAY,EAAES;AAAtB;AAAA;AAAA;AAAA;AAAA,cADF,eAEE,QAAC,YAAD;AAAc,QAAA,YAAY,EAAEA;AAA5B;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE,QAAC,IAAD;AAAM,QAAA,YAAY,EAAEZ,YAApB;AAAkC,QAAA,cAAc,EAAEU;AAAlD;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAQE,QAAC,KAAD;AAAO,MAAA,cAAc,EAAEA,cAAvB;AAAuC,MAAA,YAAY,EAAEE,YAArD;AAAmE,MAAA,YAAY,EAAEZ,YAAjF;AAA+F,MAAA,WAAW,EAAES,WAA5G;AAAyH,MAAA,SAAS,EAAEoB;AAApI;AAAA;AAAA;AAAA;AAAA,YARF,eASE,QAAC,YAAD;AAAc,MAAA,gBAAgB,EAAEhC;AAAhC;AAAA;AAAA;AAAA;AAAA,YATF;AAAA,kBADF;AAaD;;GApFQQ,G;;KAAAA,G;AAsFT,eAAeA,GAAf","sourcesContent":["// import logo from './logo.svg';\nimport React, { useState, useEffect} from 'react';\nimport Header from './components/Header'\nimport Figure from './components/Figure'\nimport WrongLetters from './components/WrongLetters';\nimport Word from './components/Word';\nimport Notification from './components/Notification';\nimport Popup from './components/Popup';\n//because we can't have the same name as state when we import, we use as keyword to rename showNotication to show\nimport { showNotification as show } from './helpers/helpers';\nimport './App.css';\n\nconst words = ['animal', 'code', 'animate', 'flavor'];\n\nlet selectedWord = words[Math.floor(Math.random() * words.length)];\n \nfunction App() {\n  //useState to create countdown timer\n  const [counter, setCounter] = React.useState(60);\n\n  //useState to keep track and see if the game is playable, initially set to true\n  const [playable, setPlayable] = useState(true);\n//useState to keep track of correct letters, initially set to empty array\n  const [correctLetters, setCorrectLetters] = useState([]);\n//useState to keep track of wrong letters, initially set to empty array\n  const [wrongLetters, setWrongLetters] = useState([]);\n//useState to showNotification when same letter is tried twice, initially set to false\n  const [showNotification, setShowNotification] = useState(false);\n\n  //add counter in useEffect hook so that every time when the counter changes, new setInterval() is called.\n  React.useEffect(() => {\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n      \n    return () => clearInterval(timer);\n  }, [counter]);\n\n  //useEffect meant to be a side effect of the app\nuseEffect(() => {\n  const handleKeydown = event => {\n    //destructure function\n    const {key, keyCode} = event;\n    //if the user inputs a letter key on the keyboard, 65 - 90 is the letters on keyboard \n      if (playable && keyCode >= 65 && keyCode <= 90) {\n      //then get the letter user inputed\n        const letter = key.toLowerCase();\n  //checking to see if our selected word includes a letter in selected word\n        if (selectedWord.includes(letter)) {\n    //if it does not include a correct letter, we are going to add it to our letters\n          if (!correctLetters.includes(letter)) {\n      //take our correct letters and create a new array  and spread and add to that new letter\n           setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            //calling show function in and passing our setterfunction setShowNotification in helper folder\n            // if it does include our correct letter already, we've entered it twice, it needs to show notification that we already entered that letter\n            show(setShowNotification);\n          }\n        } else {\n          //if it includes wrong letter, take our wrongletters and create a new array  and spread and add to that new letter\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(wrongLetters => [...wrongLetters, letter]);\n          } else {\n            //if it already shows wrong letter twice, show notification we've already entered that letter\n            show(setShowNotification);\n          }\n        }\n      }\n    }\n    //we useEffect because everytime this app renders we don't want to add another eventlistener each time. \n  window.addEventListener('keydown',  handleKeydown);\n//Everytime it renders, it makes a new event listener, we use useEffect and this function gets called and cleans up the event listener so at anytime we only have one eventlistener running. \n      // Keydown letter press\n  return () => window.removeEventListener('keydown', handleKeydown);\n    //in this array, anytime correctletters, wrongletters, or playable get rendered, that's when the function if(!wrongletters.includes) is called\n}, [correctLetters, wrongLetters, playable]);\n\nfunction playAgain() {\n  setPlayable(true);\n\n  //reset arrays of correct letters and wrong letters to empty array\n  setCorrectLetters([]);\n  setWrongLetters([]);\n\n  const random = Math.floor(Math.random() * words.length);\n  selectedWord = words[random];\n}\n\n  return (\n    <>\n      <Header />\n      <div className=\"game-container\">\n        <Figure wrongLetters={wrongLetters} />\n        <WrongLetters wrongLetters={wrongLetters} />\n        {/* passing selectedWord and correctedLetters props in word component*/}\n        <Word selectedWord={selectedWord} correctLetters={correctLetters} />\n      </div>\n      <Popup correctLetters={correctLetters} wrongLetters={wrongLetters} selectedWord={selectedWord} setPlayable={setPlayable} playAgain={playAgain}/>\n      <Notification showNotification={showNotification}/>\n    </> \n  )\n}\n\nexport default App;\n "]},"metadata":{},"sourceType":"module"}