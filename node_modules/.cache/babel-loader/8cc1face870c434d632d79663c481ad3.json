{"ast":null,"code":"var _jsxFileName = \"/Users/jenhh/src/techtonica-assignments/hangman-game-react/src/App.js\",\n    _s = $RefreshSig$();\n\n// import logo from './logo.svg';\nimport React, { useState, useEffect } from 'react';\nimport Header from './components/Header';\nimport Figure from './components/Figure';\nimport WrongLetters from './components/WrongLetters';\nimport Word from './components/Word';\nimport Popup from './components/Popup';\nimport Notification from './components/Notification'; //because we can't have the same name as state when we import, we use as keyword to rename showNotication to show\n\nimport { showNotification as show } from './helpers/helpers';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst words = ['animal', 'code', 'animate', 'flavor'];\nlet selectedWord = words[Math.floor(Math.random() * words.length)];\n\nfunction App() {\n  _s();\n\n  //useState to keep track and see if the game is playable, initially set to true\n  const [playable, setPlayable] = useState(true); //useState to keep track of correct letters, initially set to empty array\n\n  const [correctLetters, setCorrectLetters] = useState([]); //useState to keep track of wrong letters, initially set to empty array\n\n  const [wrongLetters, setWrongLetters] = useState([]); //useState to showNotification when same letter is tried twice, initially set to false\n\n  const [showNotification, setShowNotification] = useState(false); //useEffect meant to be a side effect of the app\n\n  useEffect(() => {\n    const handleKeydown = event => {\n      //destructure function\n      const {\n        key,\n        keyCode\n      } = event; //if the user inputs a letter key on the keyboard, 65 - 90 is the letters on keyboard \n\n      if (playable && keyCode >= 65 && keyCode <= 90) {\n        //then get the letter user inputed\n        const letter = key.toLowerCase(); //\n        //if the selected word includes the letter in selectedword\n\n        if (selectedWord.includes(letter)) {\n          //if the current correct letters does not include a correct letter, we will setCorrectLetters function useState\n          if (!correctLetters.includes(letter)) {\n            //take our corrent letters and create a new array  and spread and add to that new letter\n            setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            //calling show function in and passing our setterfunction setShowNotification in helper folder\n            show(setShowNotification);\n          }\n        } else {\n          //if it doesn't include wrong letter, take our wrongletters and create a new array  and spread and add to that new letter\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(wrongLetters => [...wrongLetters, letter]);\n          } else {\n            show(setShowNotification);\n          }\n        }\n      }\n    }; //we useEffect because everytime this app renders we don't want to add another eventlistener each time. \n\n\n    window.addEventListener('keydown', handleKeydown); //Everytime it renders, it makes a new event listener, we use useEffect and this function gets called and cleans up the event listener so at anytime we only have one eventlistener running. \n    // Keydown letter press\n\n    return () => window.removeEventListener('keydown', handleKeydown); //in this array, anytime correctletters, wrongletters, or playable get rendered, that's when the function if(!wrongletters.includes) is called\n  }, [correctLetters, wrongLetters, playable]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-container\",\n      children: [/*#__PURE__*/_jsxDEV(Figure, {\n        wrongLetters: wrongLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(WrongLetters, {\n        wrongLetters: wrongLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Word, {\n        selectedWord: selectedWord,\n        correctLetters: correctLetters\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Popup, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n_s(App, \"01339m8ADmuWJa1yHmNYefcuCX0=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jenhh/src/techtonica-assignments/hangman-game-react/src/App.js"],"names":["React","useState","useEffect","Header","Figure","WrongLetters","Word","Popup","Notification","showNotification","show","words","selectedWord","Math","floor","random","length","App","playable","setPlayable","correctLetters","setCorrectLetters","wrongLetters","setWrongLetters","setShowNotification","handleKeydown","event","key","keyCode","letter","toLowerCase","includes","currentLetters","window","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["// import logo from './logo.svg';\nimport React, { useState, useEffect} from 'react';\nimport Header from './components/Header'\nimport Figure from './components/Figure'\nimport WrongLetters from './components/WrongLetters';\nimport Word from './components/Word';\nimport Popup from './components/Popup';\nimport Notification from './components/Notification';\n//because we can't have the same name as state when we import, we use as keyword to rename showNotication to show\nimport { showNotification as show } from './helpers/helpers';\nimport './App.css';\n\nconst words = ['animal', 'code', 'animate', 'flavor'];\n\nlet selectedWord = words[Math.floor(Math.random() * words.length)];\n \nfunction App() {\n  //useState to keep track and see if the game is playable, initially set to true\n  const [playable, setPlayable] = useState(true);\n//useState to keep track of correct letters, initially set to empty array\n  const [correctLetters, setCorrectLetters] = useState([]);\n//useState to keep track of wrong letters, initially set to empty array\n  const [wrongLetters, setWrongLetters] = useState([]);\n//useState to showNotification when same letter is tried twice, initially set to false\n  const [showNotification, setShowNotification] = useState(false);\n\n  //useEffect meant to be a side effect of the app\nuseEffect(() => {\n  const handleKeydown = event => {\n    //destructure function\n    const {key, keyCode} = event;\n    //if the user inputs a letter key on the keyboard, 65 - 90 is the letters on keyboard \n      if (playable && keyCode >= 65 && keyCode <= 90) {\n      //then get the letter user inputed\n        const letter = key.toLowerCase();\n  //\n  //if the selected word includes the letter in selectedword\n        if (selectedWord.includes(letter)) {\n    //if the current correct letters does not include a correct letter, we will setCorrectLetters function useState\n          if (!correctLetters.includes(letter)) {\n      //take our corrent letters and create a new array  and spread and add to that new letter\n           setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            //calling show function in and passing our setterfunction setShowNotification in helper folder\n            show(setShowNotification);\n          }\n        } else {\n          //if it doesn't include wrong letter, take our wrongletters and create a new array  and spread and add to that new letter\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(wrongLetters => [...wrongLetters, letter]);\n          } else {\n            show(setShowNotification);\n          }\n        }\n      }\n    }\n    //we useEffect because everytime this app renders we don't want to add another eventlistener each time. \n  window.addEventListener('keydown',  handleKeydown);\n//Everytime it renders, it makes a new event listener, we use useEffect and this function gets called and cleans up the event listener so at anytime we only have one eventlistener running. \n      // Keydown letter press\n  return () => window.removeEventListener('keydown', handleKeydown);\n    //in this array, anytime correctletters, wrongletters, or playable get rendered, that's when the function if(!wrongletters.includes) is called\n}, [correctLetters, wrongLetters, playable]);\n\n\n\n  return (\n    <>\n      <Header />\n      <div className=\"game-container\">\n        <Figure wrongLetters={wrongLetters} />\n        <WrongLetters wrongLetters={wrongLetters} />\n        {/* passing selectedWord and correctedLetters props in word component*/}\n        <Word selectedWord={selectedWord} correctLetters={correctLetters} />\n      </div>\n      <Popup />\n      <Notification />\n    </> \n  )\n}\n\nexport default App;\n "]},"metadata":{},"sourceType":"module"}