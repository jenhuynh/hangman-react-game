{"ast":null,"code":"var _jsxFileName = \"/Users/jenhh/src/techtonica-assignments/hangman-game-react/src/components/Popup.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { checkWin } from '../helpers/helpers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Popup = ({\n  correctLetters,\n  wrongLetters,\n  selectedWord,\n  setPlayable,\n  playAgain\n}) => {\n  _s();\n\n  let finalMessage = ' ';\n  let finalMessageRevealWord = '';\n  let playable = true; //passing props to check if we win or lose\n\n  if (checkWin(correctLetters, wrongLetters, selectedWord) === 'win') {\n    finalMessage = 'Congratulations! You won!'; //still playable if checkwin comes back blank, means we did not win or lose\n\n    playable = false;\n  } else if (checkWin(correctLetters, wrongLetters, selectedWord) === 'lose') {\n    finalMessage = \"You lost.\";\n    finalMessageRevealWord = `The word was: ${selectedWord}`;\n    playable = false;\n  } //set playable is a side effect so we use useEffect\n  //like this so everytime we add a letter in hangman, we want playable to run\n\n\n  useEffect(() => setPlayable(playable));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"popup-container\",\n    style: finalMessage !== '' ? {\n      display: 'flex'\n    } : {},\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"popup\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: finalMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: finalMessageRevealWord\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: playAgain,\n        children: \"Play Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 12\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }, this);\n};\n\n_s(Popup, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Popup;\nexport default Popup;\n\nvar _c;\n\n$RefreshReg$(_c, \"Popup\");","map":{"version":3,"sources":["/Users/jenhh/src/techtonica-assignments/hangman-game-react/src/components/Popup.js"],"names":["React","useEffect","checkWin","Popup","correctLetters","wrongLetters","selectedWord","setPlayable","playAgain","finalMessage","finalMessageRevealWord","playable","display"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAgC,OAAhC;AACA,SAAQC,QAAR,QAAuB,oBAAvB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAACC,EAAAA,cAAD;AAAiBC,EAAAA,YAAjB;AAA+BC,EAAAA,YAA/B;AAA6CC,EAAAA,WAA7C;AAA0DC,EAAAA;AAA1D,CAAD,KAA0E;AAAA;;AACrF,MAAIC,YAAY,GAAG,GAAnB;AACA,MAAIC,sBAAsB,GAAG,EAA7B;AACA,MAAIC,QAAQ,GAAG,IAAf,CAHqF,CAIxF;;AACG,MAAIT,QAAQ,CAACE,cAAD,EAAiBC,YAAjB,EAA+BC,YAA/B,CAAR,KAAyD,KAA7D,EAAoE;AACjEG,IAAAA,YAAY,GAAG,2BAAf,CADiE,CAEjE;;AACAE,IAAAA,QAAQ,GAAG,KAAX;AACF,GAJD,MAIO,IAAIT,QAAQ,CAACE,cAAD,EAAiBC,YAAjB,EAA+BC,YAA/B,CAAR,KAAyD,MAA7D,EAAoE;AACxEG,IAAAA,YAAY,GAAG,WAAf;AACAC,IAAAA,sBAAsB,GAAI,iBAAgBJ,YAAa,EAAvD;AACAK,IAAAA,QAAQ,GAAG,KAAX;AACF,GAboF,CAcxF;AACA;;;AACAV,EAAAA,SAAS,CAAC,MAAMM,WAAW,CAACI,QAAD,CAAlB,CAAT;AAEI,sBACE;AAAK,IAAA,SAAS,EAAG,iBAAjB;AAAmC,IAAA,KAAK,EAAEF,YAAY,KAAK,EAAjB,GAAsB;AAACG,MAAAA,OAAO,EAAC;AAAT,KAAtB,GAAyC,EAAnF;AAAA,2BACG;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACC;AAAA,kBAAKH;AAAL;AAAA;AAAA;AAAA;AAAA,cADD,eAEE;AAAA,kBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,cAFF,eAIE;AAAQ,QAAA,OAAO,EAAEF,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAWH,CA7BD;;GAAML,K;;KAAAA,K;AA+BN,eAAeA,KAAf","sourcesContent":["import React, { useEffect} from 'react'\nimport {checkWin} from '../helpers/helpers'\n\nconst Popup = ({correctLetters, wrongLetters, selectedWord, setPlayable, playAgain}) => {\n   let finalMessage = ' ';\n   let finalMessageRevealWord = '';\n   let playable = true;\n//passing props to check if we win or lose\n   if (checkWin(correctLetters, wrongLetters, selectedWord) === 'win' ){\n      finalMessage = 'Congratulations! You won!'\n      //still playable if checkwin comes back blank, means we did not win or lose\n      playable = false;\n   } else if (checkWin(correctLetters, wrongLetters, selectedWord) === 'lose'){\n      finalMessage = \"You lost.\"\n      finalMessageRevealWord = `The word was: ${selectedWord}`;\n      playable = false;\n   }\n//set playable is a side effect so we use useEffect\n//like this so everytime we add a letter in hangman, we want playable to run\nuseEffect(() => setPlayable(playable));\n\n    return (\n      <div className = \"popup-container\" style={finalMessage !== '' ? {display:'flex'} : {}}>\n         <div className=\"popup\">\n          <h2>{finalMessage}</h2>\n           <h3>{finalMessageRevealWord}</h3>\n           {/* playAgain function changes our state */}\n           <button onClick={playAgain}>Play Again</button>\n        </div>\n        </div>\n   \n    )\n}\n\nexport default Popup"]},"metadata":{},"sourceType":"module"}