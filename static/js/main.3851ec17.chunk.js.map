{"version":3,"sources":["components/Header.js","components/Figure.js","components/WrongLetters.js","components/Word.js","components/Notification.js","helpers/helpers.js","components/Popup.js","App.js","reportWebVitals.js","index.js"],"names":["Header","Figure","errors","wrongLetters","length","height","width","className","x1","y1","x2","y2","cx","cy","r","WrongLetters","map","letter","i","reduce","prev","currentVal","Word","selectedWord","correctLetters","split","includes","Notification","showNotification","setter","setTimeout","checkWin","correct","wrong","word","status","forEach","Popup","setPlayable","playAgain","finalMessage","finalMessageRevealWord","playable","useEffect","style","display","onClick","words","Math","floor","random","App","React","useState","counter","setCounter","setCorrectLetters","setWrongLetters","setShowNotification","timer","setInterval","clearInterval","handleKeydown","event","key","keyCode","toLowerCase","show","currentLetters","window","addEventListener","removeEventListener","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3851ec17.chunk.js","sourcesContent":["import React from 'react'\n\nconst Header = () => {\n    return (\n        <>\n         <h1>Can you H_ang?</h1>\n         <p>Figure out the hidden word - Enter a letter!</p>\n        </>\n    )\n}\n\nexport default Header","import React from 'react'\n\nconst Figure = ({wrongLetters}) => {\n  //looks for how many wrong letters we have\n  const errors = wrongLetters.length;\n    return (\n        <svg height=\"250\" width=\"200\" className=\"figure-container\">\n        {/* Pole */}\n        <line x1=\"60\" y1=\"20\" x2=\"140\" y2=\"20\" />\n        <line x1=\"140\" y1=\"20\" x2=\"140\" y2=\"50\" />\n        <line x1=\"60\" y1=\"20\" x2=\"60\" y2=\"230\" />\n        <line x1=\"20\" y1=\"230\" x2=\"100\" y2=\"230\" />\n\n        {/* Head */}\n      {/* if our errors are greater than 0, we will display the head */}\n      {errors > 0 && <circle cx=\"140\" cy=\"70\" r=\"20\" />}\n        {/* Body */}\n        {/* if our errors are greater than 2, we will display the body */}\n        {errors > 1 && <line x1=\"140\" y1=\"90\" x2=\"140\" y2=\"150\" />}\n        {/* Arms */}\n         {/* if our errors are greater than 3, we will display the first arm */}\n        {errors > 2 && <line x1=\"140\" y1=\"120\" x2=\"120\" y2=\"100\" />}\n        {/* if our errors are greater than 4, we will display the second arm */}\n        {errors > 3 && <line x1=\"140\" y1=\"120\" x2=\"160\" y2=\"100\"/>}\n        {/* Legs */}\n         {/* if our errors are greater than 6, we will display the first leg */}\n       {errors > 4 &&  <line x1=\"140\" y1=\"150\" x2=\"120\" y2=\"180\" />}\n        {/* if our errors are greater than 6, we will display the last leg */}\n       {errors > 5 &&  <line x1=\"140\" y1=\"150\" x2=\"160\" y2=\"180\"/>}\n      </svg>\n    )\n}\n\nexport default Figure\n","import React from 'react'\n\n//destructure props with wrongLetters\nconst WrongLetters = ({wrongLetters}) => {\n    return(\n      <div className=\"wrong-letters-container\">\n        <div>\n          {/* if wrongLetters length greater than O, add paragraph */}\n        {wrongLetters.length > 0 &&<p>Wrong</p>}\n        {/* key with index will add the span every single time when a wrong letter is typed in. Each wrong letter will be displayed inside span*/}\n        {wrongLetters\n          .map((letter, i) => <span key={i}>{letter}</span>)\n          /* reduce will add the comma in between every one of the spans between previous value and current value. If it equals null then our currentVal, else will have previous and add comma. */\n          .reduce((prev, currentVal) => prev === null ? [currentVal] : [prev, ',' , currentVal], null)}\n        </div>\n      </div>\n    )\n}\n\nexport default WrongLetters","import React from 'react';\n\n//destructuring props to include selected word and correct letters\nconst Word = ({ selectedWord, correctLetters }) => {\n  /* First we use split to separate strings into single characters. Then we map through the selected word. Each word in the selected word is checking to see if it's inside the correct letters array. If it is, we want to display the letter in span. If not, we want it blank. */\n      \n  return (\n    <div className=\"word\">\n      {selectedWord.split('').map((letter, i) => {\n        return (\n           //adding key with index because we are mapping through everything or looped through\n          <span className=\"letter\" key={i}>\n              {/* using .includes since we're using this check to see if it includes a correct letter as we map through the selected word */}\n            {correctLetters.includes(letter) ? letter : ''}\n          </span>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Word","import React from 'react'\n\nconst Notification = ({ showNotification }) => {\n    return (\n      //condition checks if 2 of the same letters are inputed by user, show notification. If not, then add nothing.\n    <div className={` notification-container ${showNotification ? 'show' : '' }`}>\n    <p>You have already entered this letter.</p>\n    </div>\n    )\n}\n\nexport default Notification","//creating helper function to show notification\nexport function showNotification(setter) {\n    //initially set to true\n    setter(true);\n    //after 2 seconds, will set it to false\n    setTimeout(() => {\n        setter(false);\n    }, 2000);\n}\n\nexport function checkWin(correct, wrong, word){\n    let status = 'win';\n//change status dependent on what we user inputs\n\n    //check for wins\n    // split splits each string into individual letters, \n    word.split('').forEach(letter => {\n        //if our correct letters in array does not include a letter from our word then we'll set status equal to nothing which means we haven't won or lost\n        if(!correct.includes(letter)){\n            status = '';\n        }\n    });\n    //check for loss, we have set limit to six chances. If we reach 6 chances, we lost\n    if(wrong.length === 6) status = 'lose';\n //it will return we won, we didn't win or lose or we lost\n    return status;\n}\n","import React, { useEffect } from 'react';\nimport { checkWin } from '../helpers/helpers';\n\nconst Popup = ({correctLetters, wrongLetters, selectedWord, setPlayable, playAgain}) => {\n  let finalMessage = '';\n  let finalMessageRevealWord = '';\n  let playable = true;\n//passing props to check if we win or lose\n  if( checkWin(correctLetters, wrongLetters, selectedWord) === 'win' ) {\n    finalMessage = 'You won!';\n    playable = false;\n      //still playable if checkwin comes back blank, means we did not win or lose\n  } else if( checkWin(correctLetters, wrongLetters, selectedWord) === 'lose' ) {\n    finalMessage = 'You lost.';\n    finalMessageRevealWord = `The word was: ${selectedWord}`;\n    playable = false;\n  }\n  //set playable is a side effect so we use useEffect\n//like this so everytime we add a letter in hangman, we want playable to run\n\n  useEffect(() => {\n    setPlayable(playable);\n  });\n\n  return (\n    <div className=\"popup-container\" style={finalMessage !== '' ? {display:'flex'} : {}}>\n      <div className=\"popup\">\n        <h2>{finalMessage}</h2>\n        <h3>{finalMessageRevealWord}</h3>\n           {/* playAgain function changes our state */}\n        <button onClick={playAgain}>Play Again</button>\n      </div>\n    </div>\n  )\n}\n\nexport default Popup","import React, { useState, useEffect} from 'react';\nimport Header from './components/Header'\nimport Figure from './components/Figure'\nimport WrongLetters from './components/WrongLetters';\nimport Word from './components/Word';\nimport Notification from './components/Notification';\nimport Popup from './components/Popup';\n//because we can't have the same name as state when we import, we use as keyword to renamed showNotification to show \nimport { showNotification as show } from './helpers/helpers';\nimport './App.css';\n\nconst words = ['animal', 'code', 'animate', 'flavor'];\n\nlet selectedWord = words[Math.floor(Math.random() * words.length)];\n \nfunction App() {\n  //useState to create countdown timer\n  const [counter, setCounter] = React.useState(120);\n\n  //useState to keep track and see if the game is to be playable/played again, initially set to true\n  const [playable, setPlayable] = useState(true);\n//useState to keep track of correct letters, initially set to empty array\n  const [correctLetters, setCorrectLetters] = useState([]);\n//useState to keep track of wrong letters, initially set to empty array\n  const [wrongLetters, setWrongLetters] = useState([]);\n//useState to showNotification when same letter is tried twice, initially set to false\n  const [showNotification, setShowNotification] = useState(false);\n\n  //add counter in useEffect hook so that every time when the counter changes, new setInterval() is called.\n  React.useEffect(() => {\n     //use callback function in useEffect hook to clear the interval in current scope so that only one setInterval() instance is running in the global environment at the same time.\n    const timer =\n      counter > 0 && setInterval(() => setCounter(counter - 1), 1000);\n     \n    return () => clearInterval(timer);\n  }, [counter]);\n\n  //useEffect meant to be a side effect of the app\nuseEffect(() => {\n  const handleKeydown = event => {\n    //destructure function\n    const {key, keyCode} = event;\n    //if the user inputs a letter key on the keyboard, 65 - 90 is the letters on keyboard \n      if (playable && keyCode >= 65 && keyCode <= 90) {\n      //then get the letter user inputed\n        const letter = key.toLowerCase();\n  //checking to see if our selected word includes a letter in selected word\n        if (selectedWord.includes(letter)) {\n    //if it does not include a correct letter, we are going to add it to our letters\n          if (!correctLetters.includes(letter)) {\n      //take our correct letters and create a new array  and spread and add to that new letter\n           setCorrectLetters(currentLetters => [...currentLetters, letter]);\n          } else {\n            //calling show function in and passing our setterfunction setShowNotification in helper folder\n            // if it does include our correct letter already, we've entered it twice, it needs to show notification that we already entered that letter\n            show(setShowNotification);\n          }\n        } else {\n          //if it includes wrong letter, take our wrongletters and create a new array  and spread and add to that new letter\n          if (!wrongLetters.includes(letter)) {\n            setWrongLetters(wrongLetters => [...wrongLetters, letter]);\n          } else {\n            //if it already shows wrong letter twice, show notification we've already entered that letter\n            show(setShowNotification);\n          }\n        }\n      }\n    }\n    //we useEffect because everytime this app renders we don't want to add another eventlistener each time. \n  window.addEventListener('keydown',  handleKeydown);\n//Everytime it renders, it makes a new event listener, we use useEffect and this function gets called and cleans up the event listener so at anytime we only have one eventlistener running. \n      // Keydown letter press\n  return () => window.removeEventListener('keydown', handleKeydown);\n    //in this array, anytime correctletters, wrongletters, or playable get rendered, that's when the function if(!wrongletters.includes) is called\n}, [correctLetters, wrongLetters, playable]);\n\nfunction playAgain() {\n  setPlayable(true);\n\n  //reset arrays of correct letters and wrong letters to empty array\n  setCorrectLetters([]);\n  setWrongLetters([]);\n\n  const random = Math.floor(Math.random() * words.length);\n  selectedWord = words[random];\n}\n\n  return (\n    <>\n      <Header />\n      <div className=\"game-container\">\n        <Figure wrongLetters={wrongLetters} />\n        <div>Countdown: {counter}</div>\n        <WrongLetters wrongLetters={wrongLetters} />\n        {/* passing selectedWord and correctedLetters props in word component*/}\n        <Word selectedWord={selectedWord} correctLetters={correctLetters} />\n      </div>\n      <Popup correctLetters={correctLetters} wrongLetters={wrongLetters} selectedWord={selectedWord} setPlayable={setPlayable} playAgain={playAgain}/>\n      <Notification showNotification={showNotification}/>\n    </> \n  )\n}\n\nexport default App;\n ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}